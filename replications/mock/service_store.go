// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influxdb/v2/replications (interfaces: ServiceStore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	influxdb "github.com/influxdata/influxdb/v2"
	platform "github.com/influxdata/influxdb/v2/kit/platform"
)

// MockServiceStore is a mock of ServiceStore interface.
type MockServiceStore struct {
	ctrl     *gomock.Controller
	recorder *MockServiceStoreMockRecorder
}

// MockServiceStoreMockRecorder is the mock recorder for MockServiceStore.
type MockServiceStoreMockRecorder struct {
	mock *MockServiceStore
}

// NewMockServiceStore creates a new mock instance.
func NewMockServiceStore(ctrl *gomock.Controller) *MockServiceStore {
	mock := &MockServiceStore{ctrl: ctrl}
	mock.recorder = &MockServiceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceStore) EXPECT() *MockServiceStoreMockRecorder {
	return m.recorder
}

// CreateReplication mocks base method.
func (m *MockServiceStore) CreateReplication(arg0 context.Context, arg1 platform.ID, arg2 influxdb.CreateReplicationRequest) (*influxdb.Replication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(*influxdb.Replication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplication indicates an expected call of CreateReplication.
func (mr *MockServiceStoreMockRecorder) CreateReplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplication", reflect.TypeOf((*MockServiceStore)(nil).CreateReplication), arg0, arg1, arg2)
}

// DeleteBucketReplications mocks base method.
func (m *MockServiceStore) DeleteBucketReplications(arg0 context.Context, arg1 platform.ID) ([]platform.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketReplications", arg0, arg1)
	ret0, _ := ret[0].([]platform.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketReplications indicates an expected call of DeleteBucketReplications.
func (mr *MockServiceStoreMockRecorder) DeleteBucketReplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketReplications", reflect.TypeOf((*MockServiceStore)(nil).DeleteBucketReplications), arg0, arg1)
}

// DeleteReplication mocks base method.
func (m *MockServiceStore) DeleteReplication(arg0 context.Context, arg1 platform.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReplication indicates an expected call of DeleteReplication.
func (mr *MockServiceStoreMockRecorder) DeleteReplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplication", reflect.TypeOf((*MockServiceStore)(nil).DeleteReplication), arg0, arg1)
}

// GetFullHTTPConfig mocks base method.
func (m *MockServiceStore) GetFullHTTPConfig(arg0 context.Context, arg1 platform.ID) (*influxdb.ReplicationHTTPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullHTTPConfig", arg0, arg1)
	ret0, _ := ret[0].(*influxdb.ReplicationHTTPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullHTTPConfig indicates an expected call of GetFullHTTPConfig.
func (mr *MockServiceStoreMockRecorder) GetFullHTTPConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullHTTPConfig", reflect.TypeOf((*MockServiceStore)(nil).GetFullHTTPConfig), arg0, arg1)
}

// GetReplication mocks base method.
func (m *MockServiceStore) GetReplication(arg0 context.Context, arg1 platform.ID) (*influxdb.Replication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplication", arg0, arg1)
	ret0, _ := ret[0].(*influxdb.Replication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplication indicates an expected call of GetReplication.
func (mr *MockServiceStoreMockRecorder) GetReplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplication", reflect.TypeOf((*MockServiceStore)(nil).GetReplication), arg0, arg1)
}

// ListReplications mocks base method.
func (m *MockServiceStore) ListReplications(arg0 context.Context, arg1 influxdb.ReplicationListFilter) (*influxdb.Replications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReplications", arg0, arg1)
	ret0, _ := ret[0].(*influxdb.Replications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReplications indicates an expected call of ListReplications.
func (mr *MockServiceStoreMockRecorder) ListReplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplications", reflect.TypeOf((*MockServiceStore)(nil).ListReplications), arg0, arg1)
}

// Lock mocks base method.
func (m *MockServiceStore) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockServiceStoreMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockServiceStore)(nil).Lock))
}

// PopulateRemoteHTTPConfig mocks base method.
func (m *MockServiceStore) PopulateRemoteHTTPConfig(arg0 context.Context, arg1 platform.ID, arg2 *influxdb.ReplicationHTTPConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateRemoteHTTPConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateRemoteHTTPConfig indicates an expected call of PopulateRemoteHTTPConfig.
func (mr *MockServiceStoreMockRecorder) PopulateRemoteHTTPConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateRemoteHTTPConfig", reflect.TypeOf((*MockServiceStore)(nil).PopulateRemoteHTTPConfig), arg0, arg1, arg2)
}

// Unlock mocks base method.
func (m *MockServiceStore) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockServiceStoreMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockServiceStore)(nil).Unlock))
}

// UpdateReplication mocks base method.
func (m *MockServiceStore) UpdateReplication(arg0 context.Context, arg1 platform.ID, arg2 influxdb.UpdateReplicationRequest) (*influxdb.Replication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(*influxdb.Replication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplication indicates an expected call of UpdateReplication.
func (mr *MockServiceStoreMockRecorder) UpdateReplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplication", reflect.TypeOf((*MockServiceStore)(nil).UpdateReplication), arg0, arg1, arg2)
}
