// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influxdb/v2/replications/remotewrite (interfaces: HttpConfigStore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/influxdata/influxdb/v2"
	platform "github.com/influxdata/influxdb/v2/kit/platform"
)

// MockHttpConfigStore is a mock of HttpConfigStore interface.
type MockHttpConfigStore struct {
	ctrl     *gomock.Controller
	recorder *MockHttpConfigStoreMockRecorder
}

// MockHttpConfigStoreMockRecorder is the mock recorder for MockHttpConfigStore.
type MockHttpConfigStoreMockRecorder struct {
	mock *MockHttpConfigStore
}

// NewMockHttpConfigStore creates a new mock instance.
func NewMockHttpConfigStore(ctrl *gomock.Controller) *MockHttpConfigStore {
	mock := &MockHttpConfigStore{ctrl: ctrl}
	mock.recorder = &MockHttpConfigStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpConfigStore) EXPECT() *MockHttpConfigStoreMockRecorder {
	return m.recorder
}

// GetFullHTTPConfig mocks base method.
func (m *MockHttpConfigStore) GetFullHTTPConfig(arg0 context.Context, arg1 platform.ID) (*influxdb.ReplicationHTTPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullHTTPConfig", arg0, arg1)
	ret0, _ := ret[0].(*influxdb.ReplicationHTTPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullHTTPConfig indicates an expected call of GetFullHTTPConfig.
func (mr *MockHttpConfigStoreMockRecorder) GetFullHTTPConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullHTTPConfig", reflect.TypeOf((*MockHttpConfigStore)(nil).GetFullHTTPConfig), arg0, arg1)
}

// UpdateResponseInfo mocks base method.
func (m *MockHttpConfigStore) UpdateResponseInfo(arg0 context.Context, arg1 platform.ID, arg2 int, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResponseInfo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResponseInfo indicates an expected call of UpdateResponseInfo.
func (mr *MockHttpConfigStoreMockRecorder) UpdateResponseInfo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResponseInfo", reflect.TypeOf((*MockHttpConfigStore)(nil).UpdateResponseInfo), arg0, arg1, arg2, arg3)
}
